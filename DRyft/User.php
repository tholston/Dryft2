<?php

/**
 * Model user objects and provide storage/retrieval from the database.
 *
 * @author Errol Sayre
 */

namespace DRyft;

class User
{

	/**
	 * User identification number
	 *
	 * Protect this value to make it immutable.
	 *
	 * @type int
	 */
	protected $id;

	/**
	 * User account name
	 *
	 * Protect this value to make it immutable.
	 *
	 * @type string
	 */
	protected $username;

	/**
	 * User type
	 *
	 * Indicates if the user account is for a client, driver, or coordinator.
	 * Protect this value to make it immutable.
	 *
	 * @type string
	 */
	protected $type;

	/**
	 * User password hash
	 *
	 * This value is a hash generated by the password_hash algorithm.
	 * Protect this value to make it immutable without the appropriate accessors.
	 *
	 * @type string
	 */
	protected $passwordHash;

	/**
	 * Last name
	 * @type string
	 */
	public $lastName;

	/**
	 * First name
	 * @type string
	 */
	public $firstName;

	/**
	 * Middle name
	 * @type string
	 */
	public $middleName;

	/**
	 * Home address
	 *
	 * Home address instance.
	 * Protect this value to make it immutable without the appropriate accessors.
	 *
	 * @type DRyft\Address
	 */
	protected $homeAddress;

	/**
	 * Mailing address
	 *
	 * Mailing address instance.
	 * Protect this value to make it immutable without the appropriate accessors.
	 *
	 * @type DRyft\Address
	 */
	protected $mailingAddress;



	/**
	 * Constructor
	 *
	 * @param string $userName
	 * @param string $lastName
	 * @param string $firstName
	 * @param string $middleName
	 * @param string $type
	 * @param int $userId
	 * @param string $passwordHash
	 * @return DRyft\User
	 */
	public function __construct(
		string $userName,
		string $lastName,
		string $firstName,
		string $middleName = '',
		string $type = 'Client',
		int $userId = 0,
		string $passwordHash = ''
	) {
		$this->id           = $userId;
		$this->username     = $userName;
		$this->type         = $type;
		$this->lastName     = $lastName;
		$this->firstName    = $firstName;
		$this->middleName   = $middleName;
		$this->passwordHash = $passwordHash;
	}


	/**
	 * Get the user id
	 * @return int
	 */
	public function id()
	{
		return $this->id;
	}
	/**
	 * Get the username
	 * @return string
	 */
	public function username()
	{
		return $this->username;
	}

	/**
	 * Is the user a driver
	 */
	public function isDriver()
	{
		if ($this->type == USER_TYPE_DRIVER) {
			return true;
		}

		return false;
	}

	/**
	 * Is the user a client
	 */
	public function isClient()
	{
		if ($this->type == USER_TYPE_CLIENT) {
			return true;
		}

		return false;
	}

	/**
	 * Is the user a coordinator
	 */
	public function isCoordinator()
	{
		if ($this->type == USER_TYPE_COORDINATOR) {
			return true;
		}

		return false;
	}

	/**
	 * Set a new password
	 *
	 * @param string $password
	 */
	public function setPassword(string $password)
	{
		$this->passwordHash = password_hash($password, PASSWORD_DEFAULT);
	}

	/**
	 * Compare a user's password
	 *
	 * @param string $password
	 * @return boolean
	 */
	public function validatePassword(string $password)
	{
		return password_verify($password, $this->passwordHash);
	}



	/**
	 * Store the object to the database.
	 *
	 * @return boolean
	 */
	public function save()
	{
		return false;
	}



	/**
	 * Load a user by username
	 *
	 * @param string $username
	 * @return mixed
	 */
	public function getUserByName(string $username)
	{

		// Grab a copy of the database connection
		$db = Database\Connection::getConnection();

		$select = 'SELECT * FROM `users` WHERE `username` = "'
			. $db->escape_string($username) . '";';

		return self::loadUserByQuery($select);
	}

	/**
	 * Load a user by id
	 *
	 * @param int $userId
	 * @return mixed
	 */
	public static function getUserById(int $userId)
	{
		// secure the query by forcing an integer value
		return self::loadUserByQuery(
			'SELECT * FROM `users` WHERE `USER_ID` = ' . intval($userId) . ';'
		);
	}

	/**
	 * Load all users from the database
	 *
	 * @return array
	 */
	public static function getUsers()
	{
		// collect them all
		return self::loadUsersByQuery(
			'SELECT * FROM `users` ORDER BY name_last, name_first, name_middle, USER_ID;'
		);
	}

	/**
	 * Execute a single select
	 *
	 * @param string $query
	 * @return User
	 */
	protected static function loadUserByQuery(string $select)
	{
		// use the multi-select to load matching users
		$users = self::loadUsersByQuery($select);

		// confirm the result set size
		$count = count($users);
		if ($count > 1) {
			// We must have just one result
			throw new Database\Exception('Single Lookup Failed: returned ' . count($users) . ' rows.');
		} elseif (!$count) {
			// No results found
			throw new Database\Exception('Single Lookup Failed: no match found.');
		}

		// pop off the single result
		return array_shift($users);
	}

	/**
	 * Load multiple users from a query
	 *
	 * @param string $query
	 * @return array
	 */
	protected static function loadUsersByQuery(string $select)
	{
		// Setup a dummy return value
		$users = [];

		// Grab a copy of the database connection
		$db = Database\Connection::getConnection();

		// confirm the query worked
		if (($result = $db->query($select)) === false) {
			// TODO: replace a simple error with an exception
			throw new Database\Exception('DB Query Failed: ' . $db->error);
		}

		// load and convert each result object
		while (($data = $result->fetch_object()) !== null) {
			$users[] = self::objectForRow($data);
		}

		// convert the resulting object
		return $users;
	}

	/**
	 * Convert a MySQL row object to a User
	 *
	 * @param object
	 * @return User
	 */
	public static function objectForRow($data)
	{

		// Create the appropriate subclass based on the user type
		return new User(
			$data->username,
			$data->name_last,
			$data->name_first,
			$data->name_middle,
			$data->type,
			$data->USER_ID,
			$data->pw_hash
		);
	}
}
